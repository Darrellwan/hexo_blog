name: Update Analytics Data

on:
  repository_dispatch:
    types: [update-analytics]
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create data directory if not exists
        run: mkdir -p data

      - name: Process Analytics Data
        id: process-data
        continue-on-error: true  # 允許在此步驟失敗時繼續執行
        run: |
          echo "使用 client_payload 數據" >&2
          payload='${{ toJSON(github.event.client_payload.data) }}'
          echo "Payload 長度: ${#payload}" >&2
          echo "Payload 內容: $payload" >&2
          
          if [ "$payload" = "null" ] || [ -z "$payload" ]; then
            if [ -f "data/analytics.json" ]; then
              echo "使用現有數據作為備用..." >&2
              existing_data=$(cat data/analytics.json)
              raw_data=$(echo "$existing_data" | jq '{
                "30days": (.data_30days // .data // []),
                "7days": (.data_7days // [])
              }')
            else
              echo "找不到現有數據，使用空物件..." >&2
              raw_data='{"30days":[],"7days":[]}'
            fi
          else
            echo "直接使用 payload 數據..." >&2
            # 檢查 payload 是否已經是 JSON 格式
            if echo "$payload" | jq empty 2>/dev/null; then
              echo "Payload 是有效的 JSON 格式" >&2
              # 檢查 payload 是否已經包含 30days 和 7days
              if echo "$payload" | jq 'has("30days") and has("7days")' | grep -q "true"; then
                echo "Payload 已包含所需的數據結構" >&2
                raw_data="$payload"
              else
                echo "Payload 不包含所需的數據結構，嘗試解析..." >&2
                # 嘗試直接使用 payload
                raw_data="$payload"
              fi
            else
              echo "Payload 不是有效的 JSON 格式，嘗試寫入臨時文件..." >&2
              echo "$payload" > temp_data.json
              raw_data=$(cat temp_data.json)
            fi
          fi
          
          echo "Raw data 長度: ${#raw_data}" >&2
          
          # 驗證數據格式
          if ! echo "$raw_data" | jq empty 2>/dev/null; then
            echo "警告：無效的 JSON 格式，使用空結構..." >&2
            raw_data='{"30days":[],"7days":[]}'
          fi
          
          # 驗證數據結構並輸出更多調試信息
          echo "驗證 30days 數據結構..." >&2
          has_30days=$(echo "$raw_data" | jq 'has("30days")')
          echo "has_30days: $has_30days" >&2
          
          echo "驗證 7days 數據結構..." >&2
          has_7days=$(echo "$raw_data" | jq 'has("7days")')
          echo "has_7days: $has_7days" >&2
          
          if [ "$has_30days" != "true" ] || [ "$has_7days" != "true" ]; then
            echo "警告：無效的數據結構，使用空結構..." >&2
            echo "原始數據：$raw_data" >&2
            raw_data='{"30days":[],"7days":[]}'
          fi
          
          # 處理時期數據
          process_period_data() {
            local period=$1
            echo "處理 $period 數據..." >&2
            
            # 驗證 period 數據存在
            echo "檢查 $period 是否存在於 raw_data 中..." >&2
            echo "raw_data 類型: $(echo "$raw_data" | jq 'type')" >&2
            echo "raw_data 內容: $raw_data" >&2
            
            if ! echo "$raw_data" | jq "has(\"$period\")" > /dev/null 2>&1; then
              echo "錯誤：找不到 $period 數據" >&2
              return 1
            fi
            
            local data
            data=$(echo "$raw_data" | jq --arg period "$period" '.[$period]')
            echo "$period 數據內容: $data" >&2
            echo "$period 數據類型: $(echo "$data" | jq 'type')" >&2
            echo "$period 數據長度: $(echo "$data" | jq 'length')" >&2
            
            # 驗證數據格式
            if [ -z "$data" ] || [ "$data" = "null" ]; then
              echo "錯誤：$period 數據為空或 null" >&2
              return 1
            fi
            
            # 計算總訪問量
            local total_sessions
            total_sessions=$(echo "$data" | jq '[.[].sessions | tonumber] | add // 0')
            echo "$period 總訪問量: $total_sessions" >&2
            
            # 驗證總訪問量
            if [ -z "$total_sessions" ] || [ "$total_sessions" = "null" ]; then
              echo "錯誤：無法計算總訪問量" >&2
              return 1
            fi
            
            # 添加百分比並排序
            local processed_data
            processed_data=$(echo "$data" | jq --arg total "$total_sessions" '
              map(
                . + {
                  "sessions": (.sessions | tonumber),
                  "percentage": ((.sessions | tonumber) / ($total | tonumber) * 100 | round * 0.1)
                }
              ) | sort_by(-.sessions)
            ')
            
            # 驗證處理後的數據
            if ! echo "$processed_data" | jq empty 2>/dev/null; then
              echo "錯誤：處理後的數據不是有效的 JSON" >&2
              return 1
            fi
            
            echo "$processed_data"
          }
          
          # 處理兩個時期的數據
          echo "開始處理 30 天數據..." >&2
          processed_30days=$(process_period_data "30days")
          if [ $? -ne 0 ]; then
            echo "處理 30 天數據時發生錯誤" >&2
            exit 1
          fi
          
          echo "開始處理 7 天數據..." >&2
          processed_7days=$(process_period_data "7days")
          if [ $? -ne 0 ]; then
            echo "處理 7 天數據時發生錯誤" >&2
            exit 1
          fi
          
          # 添加時間戳記和完整數據
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # 使用 jq 來建構最終的 JSON
          echo "建構最終 JSON..." >&2
          json_with_timestamp=$(jq -n \
            --arg timestamp "$timestamp" \
            --argjson data30 "$processed_30days" \
            --argjson data7 "$processed_7days" \
            '{
              data: $data30,
              "data_30days": $data30,
              "data_7days": $data7,
              last_updated: $timestamp,
              status: "success"
            }')
          
          # 確保輸出是有效的 JSON
          echo "驗證最終 JSON..." >&2
          if echo "$json_with_timestamp" | jq empty 2>/dev/null; then
            echo "$json_with_timestamp" > data/analytics.json
            echo "Analytics data updated successfully" >&2
            
            # 輸出最終 JSON 的結構
            echo "最終 JSON 結構:" >&2
            jq 'keys' data/analytics.json >&2
            echo "data_30days 長度:" >&2
            jq '.data_30days | length' data/analytics.json >&2
            echo "data_7days 長度:" >&2
            jq '.data_7days | length' data/analytics.json >&2
            
            # 確保產生的 JSON 文件有效且包含所需的數據，否則報告錯誤
            data_30days_length=$(jq '.data_30days | length' data/analytics.json)
            data_7days_length=$(jq '.data_7days | length' data/analytics.json)
            
            if [ "$data_30days_length" -eq 0 ] && [ "$data_7days_length" -eq 0 ]; then
              echo "警告：生成的 JSON 文件中兩個數據集都為空" >&2
              # 但仍然繼續執行，因為數據可能真的是空的
            fi
            
            # 強制設定成功狀態
            echo "Process Analytics Data 步驟成功完成" >&2
            exit 0
          else
            echo "Error: Failed to generate valid JSON output" >&2
            echo "最終 JSON 內容：" >&2
            echo "$json_with_timestamp" >&2
            exit 1
          fi
          
          # 清理臨時文件
          [ -f temp_data.json ] && rm temp_data.json

      - name: Check Analytics Data
        run: |
          echo "檢查 data 目錄和 analytics.json 文件..."
          ls -la data/ || echo "data 目錄不存在"
          
          if [ -f "data/analytics.json" ]; then
            echo "analytics.json 文件存在，檢查內容..."
            cat data/analytics.json | jq 'keys' || echo "無法解析 JSON"
            
            # 即使 JSON 為空也創建一個有效的 JSON
            if ! jq empty data/analytics.json 2>/dev/null; then
              echo "創建一個新的有效 JSON..."
              echo '{"data":[],"data_30days":[],"data_7days":[],"last_updated":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","status":"empty"}' > data/analytics.json
            fi
          else
            echo "創建一個新的 analytics.json 文件..."
            echo '{"data":[],"data_30days":[],"data_7days":[],"last_updated":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","status":"created"}' > data/analytics.json
          fi

      - name: Install dependencies
        continue-on-error: true  # 允許在此步驟失敗時繼續執行
        run: |
          echo "開始安裝依賴項..."
          npm --version
          node --version
          echo "列出 package.json 中的依賴項："
          cat package.json | grep -A 20 "dependencies"
          cat package.json | grep -A 10 "devDependencies" 
          
          # 嘗試直接安裝所需的開發依賴
          npm install --no-save dayjs gray-matter js-yaml
          
          # 使用 --verbose 以獲得更詳細的安裝信息
          npm ci --verbose || {
            echo "NPM CI 命令失敗，詳細錯誤如下："
            npm list --depth=0
            echo "檢查 node_modules 目錄："
            ls -la node_modules || echo "node_modules 目錄不存在"
            echo "繼續執行工作流程..."
          }

      - name: Generate README
        continue-on-error: true  # 允許在此步驟失敗時繼續執行
        run: |
          echo "開始生成 README..."
          ls -la data/
          echo "檢查 analytics.json 內容："
          cat data/analytics.json | jq 'keys' || echo "無法解析 JSON"
          
          # 檢查 node_modules 是否完整安裝
          echo "檢查 node_modules 是否包含所需模組："
          [ -d "node_modules/dayjs" ] && echo "✅ dayjs 已安裝" || echo "❌ dayjs 未安裝"
          [ -d "node_modules/gray-matter" ] && echo "✅ gray-matter 已安裝" || echo "❌ gray-matter 未安裝"
          [ -d "node_modules/js-yaml" ] && echo "✅ js-yaml 已安裝" || echo "❌ js-yaml 未安裝"
          
          # 嘗試手動安裝所需依賴
          if [ ! -d "node_modules/dayjs" ] || [ ! -d "node_modules/gray-matter" ] || [ ! -d "node_modules/js-yaml" ]; then
            echo "缺少必要依賴，嘗試手動安裝..."
            npm install --no-save dayjs gray-matter js-yaml
          fi
          
          # 檢查 README.md 是否存在，如果不存在則創建一個基本的
          if [ ! -f "README.md" ]; then
            echo "創建基本的 README.md 文件..."
            echo "# My Blog\n\n暫無數據" > README.md
          fi
          
          # 嘗試運行 README 生成腳本
          NODE_DEBUG=fs,module,stream node scripts/generate-readme.js || {
            echo "README 生成失敗，使用備用方案..."
            # 如果腳本失敗，則創建/保留一個基本的 README
            if [ ! -f "README.md" ]; then
              echo "# My Blog\n\n數據生成失敗，請稍後再試" > README.md
            fi
          }

      - name: Commit and Push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 檢查 data/analytics.json 是否存在
          if [ -f "data/analytics.json" ]; then
            git add data/analytics.json
          fi
          
          # 檢查 README.md 是否存在
          if [ -f "README.md" ]; then
            git add README.md
          fi
          
          # 嘗試提交更改
          git commit -m "[UPDATE] Analytics data and README" || echo "No changes to commit"
          git push || echo "No changes to push" 